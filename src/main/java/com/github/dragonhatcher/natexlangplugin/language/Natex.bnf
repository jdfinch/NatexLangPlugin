{
  parserClass="com.github.dragonhatcher.natexlangplugin.language.parser.NatexParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Natex"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.dragonhatcher.natexlangplugin.language.psi"
  psiImplPackage="com.github.dragonhatcher.natexlangplugin.language.psi.impl"

  elementTypeHolderClass="com.github.dragonhatcher.natexlangplugin.language.psi.NatexTypes"
  elementTypeClass="com.github.dragonhatcher.natexlangplugin.language.psi.NatexElementType"
  tokenTypeClass="com.github.dragonhatcher.natexlangplugin.language.psi.NatexTokenType"

  psiImplUtilClass="com.github.dragonhatcher.natexlangplugin.language.psi.impl.NatexPsiImplUtil"
}

natexFile ::= obj

obj ::= L_CURLY kv ("," kv)* ","? R_CURLY

kv ::=  state_declaration | score | speaker | term_kv

state_declaration ::= QUOTE "state" QUOTE ":" QUOTE state_name QUOTE {
    pin=2
    mixin="com.github.dragonhatcher.natexlangplugin.language.psi.impl.NatexNamedElementImpl"
    implements="com.github.dragonhatcher.natexlangplugin.language.psi.NatexNamedElement"
    methods=[getName setName getNameIdentifier getTextOffset]
}
score ::= QUOTE "score" QUOTE ":" {pin=2}
speaker ::= QUOTE "speaker" QUOTE ":" QUOTE ("system" | "user") QUOTE {pin=2}
term_kv ::= QUOTE multi_term QUOTE ":" (obj | state_ref) {pin=2}

state_name ::= SYMBOL {
    methods=[getName getReference setName]
}
state_ref ::= QUOTE state_name QUOTE {pin=1 methods=[getReferencedStateName]}

multi_term ::= term (","? (QUOTE QUOTE)? term)*
term ::= optional | kleene_star | kleene_plus | non_kleene_term
private non_kleene_term ::= sequence | conjunction | disjunction | negation | REGEX | assignment | var_reference  | macro | LITERAL | SYMBOL | STATE | KEYWORD

sequence ::= L_BRACKET "!"? multi_term R_BRACKET {pin=1}
conjunction ::= L_ARROW multi_term R_ARROW {pin=1}
disjunction ::= L_CURLY multi_term R_CURLY {pin=1}
optional ::= non_kleene_term "?"
kleene_star ::= non_kleene_term "*"
kleene_plus ::= non_kleene_term "+"
negation ::= "-" term
var_reference ::= "$" SYMBOL
assignment ::= "$" SYMBOL "=" term {pin=3}
macro ::= MACRO_NAME ( L_PAREN macro_arg? (","? " "? macro_arg)* R_PAREN )? {pin=1}
macro_arg ::= (MACRO_ARG_STRING | MACRO_LITERAL | SYMBOL | PUNCUATION | term)+
x ::= PUNCUATION
